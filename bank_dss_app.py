# -*- coding: utf-8 -*-
"""bank-dss-app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k5hqJjtSle0GIU5nZ4_U8hUWUhOXjlEX
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import matplotlib.pyplot as plt
import os

# --- صفحه ---
st.set_page_config(page_title="Bank DSS App", layout="wide")
st.markdown('''
    <style>
    body {direction: ltr;}
    .title {color: #003366; font-size: 32px; font-weight: bold;}
    .subtitle {color: #336699; font-size: 20px; margin-top: 10px;}
    .box {background-color: #f0f8ff; padding: 10px; border-radius: 8px; margin-bottom: 10px;}
    .stButton>button {
        color: white;
        background-color: #003366;
        border-radius: 5px;
        padding: 0.4em 1em;
    }
    </style>
''', unsafe_allow_html=True)

st.markdown('<div class="title">💼 Bank Direct Marketing DSS</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">📊 Upload your data and get predictions using intelligent models.</div>', unsafe_allow_html=True)

# --- آپلود فایل ---
uploaded_file = st.file_uploader("📁 Upload X_test.csv file", type=['csv'])
if uploaded_file is not None:
    X_test = pd.read_csv(uploaded_file)
    st.success("✅ File successfully uploaded.")
else:
    st.stop()

# --- بارگذاری مدل‌ها ---
model_names = ['XGB_raw', 'XGB_smote', 'XGB_adasyn', 'lgb_smote', 'MLP_smote']
model_list = [(name, joblib.load(name + '.pkl')) for name in model_names]
model_dict = dict(model_list)

# --- ویژگی‌ها ---
feature_names = list(X_test.columns)

# --- سایدبار ---
st.sidebar.markdown("### ⚙️ Settings")
threshold = st.sidebar.slider("Prediction Threshold", 0.05, 0.95, 0.32, 0.01)
selected_model = st.sidebar.selectbox("Choose Model", ["Voting (Ensemble)"] + model_names)
n_top = st.sidebar.number_input("Top N SHAP Samples", min_value=1, max_value=100, value=10)

# --- تابع رأی‌گیری ---
def voting_predict(models, X, threshold):
    probas = [model.predict_proba(X)[:,1] for _, model in models]
    avg_proba = np.mean(probas, axis=0)
    preds = (avg_proba >= threshold).astype(int)
    return preds, avg_proba

# --- پیش‌بینی ---
if selected_model == "Voting (Ensemble)":
    y_pred, avg_proba = voting_predict(model_list, X_test, threshold)
else:
    model = model_dict[selected_model]
    avg_proba = model.predict_proba(X_test)[:,1]
    y_pred = (avg_proba >= threshold).astype(int)

# --- جدول نتایج ---
df = pd.DataFrame({'avg_proba': avg_proba, 'y_pred': y_pred})
st.markdown(f'<div class="box"><b>Selected Model:</b> {selected_model} | <b>Threshold:</b> {threshold:.2f}</div>', unsafe_allow_html=True)

st.subheader("📌 Prediction Results")
st.dataframe(df.head(20), use_container_width=True)

# --- دکمه دانلود ---
csv = df.to_csv(index=False).encode('utf-8')
st.download_button(label="📥 Download Predictions", data=csv, file_name='predictions.csv', mime='text/csv')

# --- SHAP ---
if selected_model == "Voting (Ensemble)":
    st.subheader("🔍 SHAP Feature Importance")

    try:
        shap_model = model_list[0][1]  # SHAP برای مدل اول
        explainer = shap.TreeExplainer(shap_model)
        shap_values = explainer.shap_values(X_test[:n_top])
        if isinstance(shap_values, list):
            shap_values = shap_values[1]
        fig = plt.figure(figsize=(10, 5))
        shap.summary_plot(shap_values, X_test[:n_top], feature_names=feature_names, plot_type="bar", show=False)
        st.pyplot(fig)
        plt.clf()
    except Exception as e:
        st.warning(f"⚠️ SHAP visualization failed: {e}")